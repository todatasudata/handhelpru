# Generated by Django 3.1.4 on 2021-01-19 17:46

import consultations.blocks
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.core.blocks
import wagtail.core.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        ('wagtailcore', '0059_apply_collection_ordering'),
    ]

    operations = [
        migrations.CreateModel(
            name='ConsultationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('number', models.IntegerField(verbose_name='Номер')),
                ('publish_date', models.DateField(null=True, verbose_name='Дата')),
                ('main_client', models.CharField(blank=True, max_length=100, verbose_name='Основной клиент')),
                ('main_question', wagtail.core.fields.RichTextField(blank=True, verbose_name='Основной вопрос')),
                ('content', wagtail.core.fields.StreamField([('question', wagtail.core.blocks.StreamBlock([('client', consultations.blocks.ClientBlock()), ('question_text', consultations.blocks.QuestionTextBlock())])), ('answer', wagtail.core.blocks.StreamBlock([('author', consultations.blocks.AuthorBlock()), ('answer_text', consultations.blocks.AnswerTextBlock())]))], blank=True, verbose_name='Содержание')),
            ],
            options={
                'verbose_name': 'Консультация',
                'verbose_name_plural': 'Консультации',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ConsultationPage2',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('number', models.IntegerField(blank=True, null=True, verbose_name='Номер')),
                ('publish_date', models.DateField(null=True, verbose_name='Дата')),
                ('client', models.CharField(blank=True, max_length=100, verbose_name='Спрашивает')),
                ('question', wagtail.core.fields.RichTextField(verbose_name='Вопрос')),
                ('answer', wagtail.core.fields.RichTextField(verbose_name='Ответ')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ConsultationsIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('content', wagtail.core.fields.StreamField([('special_text', wagtail.core.blocks.RichTextBlock()), ('additional_block', wagtail.core.blocks.RichTextBlock())], blank=True)),
            ],
            options={
                'verbose_name': 'Страница консультаций',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FAQPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('content', wagtail.core.fields.RichTextField()),
            ],
            options={
                'verbose_name': 'Частые вопросы',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ConsultationPageTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='consultations.consultationpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultations_consultationpagetag_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConsultationPage2Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='consultations.consultationpage2')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consultations_consultationpage2tag_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='consultationpage2',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='consultations.ConsultationPageTag', to='taggit.Tag', verbose_name='Теги'),
        ),
        migrations.AddField(
            model_name='consultationpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='consultations.ConsultationPageTag', to='taggit.Tag', verbose_name='Теги'),
        ),
    ]
